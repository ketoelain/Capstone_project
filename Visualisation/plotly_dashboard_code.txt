# Import required libraries
import pandas as pd
import dash
import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Input, Output
import plotly.express as px

# Read the airline data into pandas dataframe
spacex_df = pd.read_csv("spacex_launch_dash.csv")
max_payload = spacex_df['Payload Mass (kg)'].max()
min_payload = spacex_df['Payload Mass (kg)'].min()
launch_sites = {'site1': 'CCAFS LC-40', 'site2': 'VAFB SLC-4E', 'site3': 'KSC LC-39A', 'site4': 'CCAFS SLC-40'}

# Create a dash application
app = dash.Dash(__name__)

# Create an app layout
app.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',
                                        style={'textAlign': 'center', 'color': '#503D36',
                                               'font-size': 40}),
                                # TASK 1: Add a dropdown list to enable Launch Site selection
                                # The default select value is for ALL sites
                                dcc.Dropdown(id='site-dropdown', options=[{'label': 'All Sites', 'value': 'ALL'},{'label': 'CCAFS LC-40', 'value': 'site1'},{'label': 'VAFB SLC-4E', 'value': 'site2'},{'label': 'KSC LC-39A', 'value': 'site3'},{'label': 'CCAFS SLC-40', 'value': 'site4'}], value='ALL', placeholder="Select a Launch Site here", searchable=True),
                                html.Br(),

                                # TASK 2: Add a pie chart to show the total successful launches count for all sites
                                # If a specific launch site was selected, show the Success vs. Failed counts for the site
                                html.Div(dcc.Graph(id='success-pie-chart')),
                                html.Br(),

                                html.P("Payload range (Kg):"),
                                # TASK 3: Add a slider to select payload range
                                dcc.RangeSlider(id='payload-slider', min=0, max=10000, step=1000, value=[min_payload, max_payload]),

                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success
                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),
                                ])

# TASK 2:
# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output
# Function decorator to specify function input and output
@app.callback(Output(component_id='success-pie-chart', component_property='figure'),
              Input(component_id='site-dropdown', component_property='value'))
def get_pie_chart(entered_site):
    filtered_df = spacex_df
    if entered_site == 'ALL':
        fig = px.pie(filtered_df, values='class', 
        names='Launch Site', 
        title='Total successful launches by site')
    else:
        site = launch_sites[entered_site]
        filtered_df = filtered_df[filtered_df['Launch Site'] == site]
        filtered_df = pd.DataFrame(filtered_df['class'].value_counts()).reset_index(drop=False)

        filtered_df = filtered_df.rename(columns={'class': 'Outcome', 'count': 'Count'})

        names = {0: "Failure", 1: "Success"}
        filtered_df.replace({"Outcome": names}, inplace=True)

        fig = px.pie(filtered_df, values='Count',
        names='Outcome', 
        title=f'Launch outcomes at site {site}', color='Outcome', color_discrete_map={'Failure': 'red', 'Success': 'green'})
    
    return fig
            

# TASK 4:
# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output
@app.callback(Output(component_id='success-payload-scatter-chart', component_property='figure'),
              Input(component_id='site-dropdown', component_property='value'),
              Input(component_id='payload-slider', component_property='value'))
def render_scatter_plot(entered_site, entered_payload):
    filtered_df = spacex_df
    selected_min = entered_payload[0]
    selected_max = entered_payload[1]
    if entered_site == 'ALL':
        filtered_df = spacex_df
        site = 'all sites'
    else:
        site = launch_sites[entered_site]
        filtered_df = filtered_df[filtered_df['Launch Site'] == site]

    print(f"Selected range: min={selected_min}, max={selected_max}")
    filtered_df = filtered_df[(filtered_df['Payload Mass (kg)'] >= selected_min) & (filtered_df['Payload Mass (kg)'] <= selected_max)]

    fig = px.scatter(filtered_df, x='Payload Mass (kg)',
    y='class', color='Booster Version Category', title= f'Correlation between Payload and Success for {site}')

    return fig

# Run the app
if __name__ == '__main__':
    app.run_server()

